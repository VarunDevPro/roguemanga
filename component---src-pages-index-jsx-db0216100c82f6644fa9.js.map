{"version":3,"sources":["webpack:///./src/components/Hero.jsx","webpack:///./src/hooks/usePosts.jsx","webpack:///./src/components/PostPreview.jsx","webpack:///./src/pages/index.jsx"],"names":["css","Wrapper","usePosts","allMdx","nodes","map","post","artist","frontmatter","slug","cover","pic","excerpt","PostPreview","to","fluid","sharp","alt","posts","Layout","headerStyles","Hero","key"],"mappings":"6VASe,aACb,OACE,mBACEA,IAAG,GAOH,YAACC,EAAA,EAAD,KACE,kBACED,IAAG,GADL,YAKY,IACV,sBACEA,IAAG,GADL,e,SCwBKE,EAhDE,WAuCf,OAtCU,OAsCEC,OAAOC,MAAMC,KAAI,SAAAC,GAAI,MAAK,CACpCC,OAAQD,EAAKE,YAAYD,OACzBE,KAAMH,EAAKE,YAAYC,KACvBC,MAAOJ,EAAKE,YAAYE,MACxBC,IAAKL,EAAKE,YAAYG,IACtBC,QAASN,EAAKM,a,wjBCsBHC,EA/DK,SAAC,GAAD,IAAGP,EAAH,EAAGA,KAAH,OAClB,2BACE,YAAC,IAAD,CACEQ,GAAIR,EAAKG,KACTT,IAAG,GAiBFM,EAAKI,OACJ,YAAC,IAAD,CACEV,IAAG,EAOHe,MAAOT,EAAKI,MAAMM,MAAMD,MACxBE,IAAK,gBAAkBX,EAAKC,SAGhC,mBACEP,IAAG,GAQFM,EAAKK,KACJ,YAAC,IAAD,CACEX,IAAG,EASHe,MAAOT,EAAKK,IAAIK,MAAMD,MACtBE,IAAKX,EAAKC,a,6MCnDP,qBACb,IAAMW,EAAQhB,IACd,OACE,8BACE,YAACiB,EAAA,EAAD,CACEC,aAAY,GAIZ,YAACC,EAAD,MACA,YAACpB,EAAA,EAAD,CACED,IAAG,GAQFkB,EAAMb,KAAI,SAAAC,GAAI,OACb,YAAC,EAAD,CAAagB,IAAKhB,EAAKG,KAAMH,KAAMA,OAEpCY,EAAMb,KAAI,SAAAC,GAAI,OACb,YAAC,EAAD,CAAagB,IAAKhB,EAAKG,KAAMH,KAAMA,OAEpCY,EAAMb,KAAI,SAAAC,GAAI,OACb,YAAC,EAAD,CAAagB,IAAKhB,EAAKG,KAAMH,KAAMA,OAEpCY,EAAMb,KAAI,SAAAC,GAAI,OACb,YAAC,EAAD,CAAagB,IAAKhB,EAAKG,KAAMH,KAAMA,Y","file":"component---src-pages-index-jsx-db0216100c82f6644fa9.js","sourcesContent":["import React from 'react';\nimport { css } from '@emotion/core';\n\nimport Wrapper from 'components/Wrapper';\n// import Search from 'components/Search';\n\n// const searchIndices = [\n//   { name: `Artists`, title: `Artists Names`, hitComp: `PageHit` },\n// ];\nexport default () => {\n  return (\n    <div\n      css={css`\n        border-radius: 0 0 1rem 1rem;\n        overflow: hidden;\n        padding-bottom: 3rem;\n        background-color: #fff;\n      `}\n    >\n      <Wrapper>\n        <h1\n          css={css`\n            font-weight: normal;\n          `}\n        >\n          Find your{' '}\n          <strong\n            css={css`\n              font-weight: 700;\n            `}\n          >\n            mangaka\n          </strong>\n        </h1>\n        {/* <Search collapse indices={searchIndices} /> */}\n      </Wrapper>\n    </div>\n  );\n};\n","import { graphql, useStaticQuery } from 'gatsby';\n\nconst usePosts = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx {\n        nodes {\n          frontmatter {\n            artist\n            slug\n            pic {\n              sharp: childImageSharp {\n                fluid(\n                  maxWidth: 800\n                  maxHeight: 800\n                  traceSVG: { color: \"#800080\" }\n                  quality: 50\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n            cover {\n              sharp: childImageSharp {\n                fluid(\n                  maxWidth: 600\n                  maxHeight: 400\n                  traceSVG: { color: \"#800080\" }\n                  quality: 50\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  `);\n\n  return data.allMdx.nodes.map(post => ({\n    artist: post.frontmatter.artist,\n    slug: post.frontmatter.slug,\n    cover: post.frontmatter.cover,\n    pic: post.frontmatter.pic,\n    excerpt: post.excerpt,\n  }));\n};\n\nexport default usePosts;\n","import React from 'react';\nimport { css } from '@emotion/core';\nimport { Link } from 'gatsby';\nimport Image from 'gatsby-image';\n\nconst PostPreview = ({ post }) => (\n  <article>\n    <Link\n      to={post.slug}\n      css={css`\n        position: relative;\n        display: block;\n        margin-top: 1rem;\n        width: 100%;\n        border-radius: 1rem;\n        overflow: hidden;\n        outline: none;\n        border: 2px solid transparent;\n        :hover,\n        :active,\n        :focus {\n          transition: all 0.85s;\n          border: 2px solid purple;\n        }\n      `}\n    >\n      {post.cover && (\n        <Image\n          css={css`\n            filter: brightness(0.8);\n            * {\n              width: 100%;\n              margin-top: 0;\n            }\n          `}\n          fluid={post.cover.sharp.fluid}\n          alt={'Cover Art by ' + post.artist}\n        />\n      )}\n      <div\n        css={css`\n          display: inline-block;\n          position: absolute;\n          bottom: 0.5rem;\n          right: 0.5rem;\n          filter: drop-shadow(0 0.125rem 1rem #000);\n        `}\n      >\n        {post.pic && (\n          <Image\n            css={css`\n              width: 2rem;\n              height: 2rem;\n              border-radius: 50%;\n              * {\n                width: 100%;\n                margin-top: 0;\n              }\n            `}\n            fluid={post.pic.sharp.fluid}\n            alt={post.artist}\n          />\n        )}\n      </div>\n    </Link>\n  </article>\n);\n\nexport default PostPreview;\n","import React from 'react';\nimport { css } from '@emotion/core';\n\nimport Layout from 'components/Layout';\nimport Hero from 'components/Hero';\nimport Wrapper from 'components/Wrapper';\nimport usePosts from 'hooks/usePosts';\nimport PostPreview from 'components/PostPreview';\n\nexport default () => {\n  const posts = usePosts();\n  return (\n    <>\n      <Layout\n        headerStyles={css`\n          background-color: #fff;\n        `}\n      >\n        <Hero />\n        <Wrapper\n          css={css`\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            grid-gap: 1rem;\n            justify-content: center;\n            align-items: center;\n          `}\n        >\n          {posts.map(post => (\n            <PostPreview key={post.slug} post={post} />\n          ))}\n          {posts.map(post => (\n            <PostPreview key={post.slug} post={post} />\n          ))}\n          {posts.map(post => (\n            <PostPreview key={post.slug} post={post} />\n          ))}\n          {posts.map(post => (\n            <PostPreview key={post.slug} post={post} />\n          ))}\n        </Wrapper>\n      </Layout>\n    </>\n  );\n};\n"],"sourceRoot":""}